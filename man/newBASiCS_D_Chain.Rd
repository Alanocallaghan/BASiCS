% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FunctionsPart2.R
\name{newBASiCS_D_Chain}
\alias{newBASiCS_D_Chain}
\title{Creates a BASiCS_D_Chain object from pre-computed MCMC chains}
\usage{
newBASiCS_D_Chain(muTest, muRef, deltaTest, deltaRef, phi, s, nu, thetaTest,
  thetaRef, offset = 1)
}
\arguments{
\item{muTest}{MCMC chain for gene-specific expression levels \eqn{\mu[i]} (test group), defined as true input molecules in case of technical genes 
(matrix with \code{q} columns, technical genes located at the end of the matrix, all elements must be positive numbers)}

\item{muRef}{MCMC chain for gene-specific log-fold changes \eqn{\mu[i]} (reference group), defined as (log) difference in input molecules in case of technical genes 
(matrix with \code{q} columns, technical genes located at the end of the matrix)}

\item{deltaTest}{MCMC chain for gene-specific biological cell-to-cell heterogeneity hyper-parameters \eqn{\delta[i]} (test group), biological genes only 
(matrix with \code{q.bio} columns, all elements must be positive numbers)}

\item{deltaRef}{MCMC chain for gene-specific log-fold change in biological cell-to-cell heterogeneity hyper-parameters \eqn{\delta[i]} (reference group), biological genes only 
(matrix with \code{q.bio} columns, all elements must be real numbers)}

\item{phi}{MCMC chain for cell-specific mRNA content normalising constants \eqn{\phi[j]}
(matrix with \code{n} columns, all elements must be positive numbers and the sum of its elements must be equal to \code{n})}

\item{s}{MCMC chain for cell-specific capture efficiency (or amplification biases if not using UMI based counts) normalising constants \eqn{s[j]}
(matrix with \code{n} columns, all elements must be positive numbers)}

\item{nu}{MCMC chain for cell-specific random effects \eqn{\nu[j]}
(matrix with \code{n} columns, all elements must be positive numbers)}

\item{thetaTest}{MCMC chain for technical variability hyper-parameter \eqn{\theta_test} in the test sample (vector, all elements must be positive)}

\item{thetaRef}{MCMC chain for technical variability hyper-parameter \eqn{\theta_ref} in the reference sample (vector, all elements must be positive)}

\item{offset}{Offset value to be corrected (default = \code{NULL} to be internally calculated)
#@param offsetCorrect \code{TRUE}/\code{FALSE} value to indicate if offset correction is required (default value = \code{TRUE})}
}
\value{
An object of class \code{\link[BASiCS]{BASiCS_D_Chain-class}}.
}
\description{
\code{BASiCS_D_Chain} creates a \code{\link[BASiCS]{BASiCS_D_Chain-class}} object from pre-computed MCMC chains.
}
\examples{

# Data = makeExampleBASiCS_D_Data()
# MCMC_Output <- BASiCS_D_MCMC(Data, N = 50, Thin = 5, Burn = 5, 
#                StoreChains = TRUE, StoreDir = getwd(), RunName = "Example")

# ChainMuTest = as.matrix(read.table("chain_muTest_Example.txt"))
# ChainMuRef = as.matrix(read.table("chain_muRef_Example.txt"))
# ChainDeltaTest = as.matrix(read.table("chain_deltaTest_Example.txt"))
# ChainDeltaRef = as.matrix(read.table("chain_deltaRef_Example.txt"))
# ChainPhi = as.matrix(read.table("chain_phi_Example.txt"))
# ChainS = as.matrix(read.table("chain_s_Example.txt"))
# ChainNu = as.matrix(read.table("chain_nu_Example.txt"))
# ChainThetaTest = read.table("chain_thetaTest_Example.txt")[,1]
# ChainThetaRef = read.table("chain_thetaRef_Example.txt")[,1]

# MCMC_Output_Load <- newBASiCS_D_Chain(muTest = ChainMuTest, 
#                                        muRef = ChainMuRef, 
#                                        deltaTest = ChainDeltaTest, 
#                                        deltaRef = ChainDeltaRef, 
#                                        phi = ChainPhi, 
#                                        s = ChainS, 
#                                        nu = ChainNu, 
#                                        thetaTest = ChainThetaTest, 
#                                        thetaRef = ChainThetaRef)

}
\author{
Catalina A. Vallejos \email{catalina.vallejos@mrc-bsu.cam.ac.uk}
}
\seealso{
\code{\link[BASiCS]{BASiCS_D_Chain-class}}
}

